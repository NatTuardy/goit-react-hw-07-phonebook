{"version":3,"sources":["redux/contacts/contacts-actions.js","redux/contacts/contacts-reducers.js","redux/store.js","components/inputField/InputField.jsx","fields/fields.js","components/contactForm/ContactForm.jsx","components/contactList/contactItem/ContactItem.jsx","components/contactList/ContactList.jsx","components/filter/Filter.jsx","redux/contacts/contacts-selectors.js","redux/contacts/contacts-operations.js","App.js","index.js"],"names":["setFilter","createAction","getContactsRequest","getContactsSuccess","getContactsError","addContactRequest","addContactSuccess","addContactError","removeContactRequest","removeContactSuccess","removeContactError","contactItemsReducer","createReducer","actions","_","payload","store","push","idx","findIndex","id","splice","loadingReducer","errorReducer","contactFilterReducer","rootReducer","combineReducers","items","filter","loading","error","configureStore","reducer","contacts","InputField","props","data","className","label","htmlFor","list","name","type","pattern","title","required","ContactForm","onSubmit","useState","setName","number","setNumber","e","preventDefault","generate","value","onChange","target","ContactItem","onDelete","contactsList","map","onClick","ContactList","Filter","getAllContacts","getFilter","axios","defaults","baseURL","App","contactsItems","useSelector","filterString","dispatch","useDispatch","useEffect","actionFunc","a","get","newContact","contact","findDoubleContact","find","alert","action","getStore","post","console","log","item","toLowerCase","includes","delete","removeContact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ff6d9d4b.chunk.js","sourcesContent":["import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nconst setFilter = createAction(\"contacts/filter\");\r\n\r\nconst getContactsRequest = createAction(\"contacts/getRequest\");\r\nconst getContactsSuccess = createAction(\"contacts/getSuccess\");\r\nconst getContactsError = createAction(\"contacts/getError\");\r\n\r\nconst addContactRequest = createAction(\"contacts/addRequest\");\r\nconst addContactSuccess = createAction(\"contacts/addSuccess\");\r\nconst addContactError = createAction(\"contacts/addError\");\r\n\r\nconst removeContactRequest = createAction(\"contacts/removeRequest\");\r\nconst removeContactSuccess = createAction(\"contacts/removeSuccess\");\r\nconst removeContactError = createAction(\"contacts/removeError\");\r\n\r\nexport default {\r\n  setFilter,\r\n  getContactsRequest,\r\n  getContactsSuccess,\r\n  getContactsError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  removeContactRequest,\r\n  removeContactSuccess,\r\n  removeContactError,\r\n};\r\n","import { createReducer, combineReducers  } from \"@reduxjs/toolkit\";\r\n// import {addToContacts, removeFromContacts, updateFilter} from './contacts-actions'\r\nimport actions from \"./contacts-actions\";\r\n\r\nexport const contactItemsReducer = createReducer([], {\r\n    [actions.getContactsSuccess]: (_, { payload }) => payload,\r\n    [actions.addContactSuccess]: (store, {payload})=> {\r\n        store.push(payload);\r\n    },\r\n    [actions.removeContactSuccess]: (store, {payload})=> {\r\n        const idx = store.findIndex(({id}) => id === payload);\r\n        store.splice(idx, 1);\r\n    }\r\n});\r\nconst loadingReducer = createReducer(false, {\r\n    [actions.getContactsRequest]: () => true,\r\n    [actions.getContactsSuccess]: () => false,\r\n    [actions.getContactsError]: () => false,\r\n    [actions.addContactRequest]: () => true,\r\n    [actions.addContactSuccess]: () => false,\r\n    [actions.addContactError]: () => false,\r\n    [actions.removeContactRequest]: () => true,\r\n    [actions.removeContactSuccess]: () => false,\r\n    [actions.removeContactError]: () => false,\r\n  });\r\n\r\n  const errorReducer = createReducer(null, {\r\n    [actions.getContactsError]: (_, { payload }) => payload,\r\n    [actions.getContactsRequest]: () => null,\r\n    [actions.addContactError]: (_, { payload }) => payload,\r\n    [actions.addContactRequest]: () => null,\r\n    [actions.removeContactError]: (_, { payload }) => payload,\r\n    [actions.removeContactRequest]: () => null,\r\n  });\r\n\r\nexport const contactFilterReducer = createReducer('', {\r\n    [actions.setFilter]: (store, {payload})=> {\r\n        return payload\r\n    }\r\n})\r\n\r\nexport const rootReducer = combineReducers({\r\n    items: contactItemsReducer,\r\n    filter: contactFilterReducer,\r\n    loading: loadingReducer,\r\n    error: errorReducer,\r\n  });","import { configureStore } from \"@reduxjs/toolkit\";\r\n// import { persistStore } from \"redux-persist\";\r\n// import persistedReducer from \"./rootReducer\";\r\nimport { rootReducer } from \"./contacts/contacts-reducers\";\r\n\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n        contacts: rootReducer\r\n    },\r\n});\r\n\r\n","import PropTypes from 'prop-types'\r\n\r\nconst InputField = (props) => {\r\n    const data = { ...props};\r\n    return (\r\n        <div className=\"mb-3\">\r\n            {data.label && <label htmlFor={data.id} className=\"form-label\">{data.label }</label>}\r\n            <input {...data}  />\r\n        </div>        \r\n    )\r\n};\r\n\r\nexport default InputField;\r\n\r\nInputField.propTypes = {\r\n    props: PropTypes.object,\r\n  }","export const list = {\r\n    name: {\r\n      name: \"name\",\r\n      type: \"text\",\r\n      className:\"form-control\",\r\n      id:\"inputName\",\r\n      // ariaDescribedby:\"nameHelp\",\r\n      pattern: \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\",\r\n      title: \"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\",\r\n      required: true,\r\n      label: \"Name\",\r\n    },\r\n    number: {\r\n      name: \"number\",\r\n      type: \"tel\",\r\n      className:\"form-control\",\r\n      id: \"inputTelephone\",\r\n      // pattern: \"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\",\r\n      title:\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\",\r\n      required: true,\r\n      label: \"Number\"\r\n    },\r\n  };","import { useState } from \"react\";\r\nimport { generate } from \"shortid\";\r\nimport PropTypes from \"prop-types\";\r\nimport InputField from \"../inputField/InputField\";\r\nimport { list } from \"../../fields/fields\";\r\n\r\nconst ContactForm = ({ onSubmit }) => {\r\n  const [name, setName] = useState('')\r\n  const [number, setNumber] = useState('')\r\n\r\n  const handleChangeName = ({ target }) => {\r\n       setName(target.value)\r\n  };\r\n\r\n  const handleChangeNumber = ({ target }) => {\r\n      setNumber(target.value)\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const id = generate();\r\n    const newContact = { id, name, number };\r\n    onSubmit(newContact);\r\n    setName('')\r\n    setNumber('')\r\n\r\n  };\r\n  \r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit} className=\"form-control mb-3\">\r\n        <InputField {...list.name} value={name} onChange={handleChangeName} />\r\n        <InputField {...list.number} value={number} onChange={handleChangeNumber} />\r\n        <div className=\"col-12\">\r\n          <button type=\"submit\" className=\"btn btn-primary\">\r\n            Add contact\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactForm;\r\n\r\nContactForm.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n","import PropTypes from 'prop-types'\r\n\r\nconst ContactItem = ({ data = [], onDelete }) => {\r\n  const contactsList = data.map(({ name, id, number }) => (\r\n        <li\r\n          key={id}\r\n          className=\"list-group-item d-flex justify-content-between align-items-start \"\r\n        >\r\n          {name}: {number}\r\n          <button\r\n            onClick={() => onDelete(id)}\r\n            type=\"submit\"\r\n            className=\"btn btn-primary align-items-end btn-sm\"\r\n          >\r\n            Delete\r\n          </button>\r\n        </li>\r\n  ));\r\n  return <>{contactsList}</>;\r\n};\r\n\r\nexport default ContactItem;\r\n\r\nContactItem.propTypes = {\r\n  data: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string,\r\n      id: PropTypes.string,\r\n      number: PropTypes.string,\r\n    })\r\n  ),\r\n  onDelete: PropTypes.func.isRequired,\r\n}\r\n","import ContactItem from \"./contactItem/ContactItem\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ContactList = ({ data, onDelete }) => {\r\n  return (\r\n    <>\r\n      <h1>Contacts</h1>\r\n      <ul className=\"list-group d-grid gap-2 d-md-flex justify-content-center\">\r\n        <ContactItem data={data} onDelete={onDelete} />\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactList;\r\n\r\nContactList.propTypes = {\r\n  data: PropTypes.array.isRequired,\r\n  onDelete: PropTypes.func.isRequired,\r\n};\r\n","import PropTypes from 'prop-types'\r\n\r\nconst Filter = ({ onChange, filter }) => {\r\n  return (\r\n    <>\r\n      <h2>Find contacts by name:</h2>\r\n      <div className=\"form-control col-md-6\">\r\n        <input\r\n          className=\"form-control col-md-3\"\r\n          onChange={onChange}\r\n          name=\"filter\"\r\n          value={filter}\r\n          type=\"text\"\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n\r\nFilter.propTypes = {\r\n  filter: PropTypes.string,\r\n  onChange: PropTypes.func.isRequired,\r\n}","export const getAllContacts = (store) => store.contacts.items;\r\nexport const getFilter = (store) => store.contacts.filter;","import axios from 'axios';\r\nimport actions from \"./contacts-actions\";\r\n\r\naxios.defaults.baseURL = \"http://localhost:4000/contacts\";\r\n\r\nexport const getContacts = () => async (dispatch) => {\r\n  dispatch(actions.getContactsRequest());\r\n  try {\r\n    const { data } = await axios.get(\"/\");\r\n    dispatch(actions.getContactsSuccess(data));\r\n  } catch (error) {\r\n    dispatch(actions.getContactsError(error));\r\n  }\r\n};\r\n\r\n\r\nexport const addToContacts = (contact) => {\r\n  const actionFunc = async (dispatch, getStore) => {\r\n    dispatch(actions.addContactRequest());\r\n    try {\r\n      const { data } = await axios.post(\"/\", contact);\r\n      dispatch(actions.addContactSuccess(data));\r\n    } catch (error) {\r\n      dispatch(actions.addContactError(error));\r\n    }\r\n  };\r\n\r\n  return actionFunc;\r\n};\r\n\r\nexport const removeContact = (id) => {\r\n  const actionFunc = async (dispatch) => {\r\n    dispatch(actions.removeContactRequest());\r\n    try {\r\n      const removeContact = await axios.delete(`/${id}`);\r\n      dispatch(actions.removeContactSuccess(id));\r\n    } catch (error) {\r\n      dispatch(actions.removeContactError(error));\r\n    }\r\n  };\r\n\r\n  return actionFunc;\r\n};\r\n","import {useEffect} from 'react'\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport ContactForm from \"./components/contactForm/ContactForm\";\nimport ContactList from \"./components/contactList/ContactList\";\nimport Filter from \"./components/filter/Filter\";\n\nimport actions from \"./redux/contacts/contacts-actions\";\nimport {\n  getAllContacts,\n  getFilter,\n} from \"./redux/contacts/contacts-selectors\";\nimport { getContacts, addToContacts, removeContact, } from './redux/contacts/contacts-operations'\nimport \"./App.css\";\n\nconst App = () => {\n  const contactsItems = useSelector(getAllContacts);\n  const filterString = useSelector(getFilter);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const actionFunc = getContacts();\n    dispatch(actionFunc);\n  }, [dispatch]);\n\n  const handleFilter = () => {\n    const filteredContacts = contactsItems.filter((item) =>\n      item.name.toLowerCase().includes(filterString.toLowerCase())\n    );\n    return filteredContacts;\n  };\n\n  const handleChange = ({ target }) => {\n    const { value} = target;\n    dispatch(actions.setFilter(value))\n  };\n\n  const handleSubmit = (newContact) => {\n    const findDoubleContact = contactsItems.find(\n      (contact) => contact.name === newContact.name\n    );\n    if (findDoubleContact) {\n      alert(`${findDoubleContact.name} is already in contacts`);\n    } else {\n      const action = addToContacts(newContact);\n      console.log(action)\n      dispatch(action);\n    }\n  };\n\n  const handleDelete = (id) => {\n    dispatch(removeContact(id));\n  };\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"App-header\">Phonebook</h1>\n      <ContactForm onSubmit={handleSubmit} />\n      <Filter onChange={handleChange} data={contactsItems} filter={filterString} />\n      <ContactList data={handleFilter()} onDelete={handleDelete} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport {store} from \"./redux/store\";\n\nimport App from './App';\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n       <App />  \n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}